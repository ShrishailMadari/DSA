
What is an Array?
=================
An array is a data structure that stores a fixed-size sequence of elements of the same type. 
Arrays.Arrays are used to store collections of data, but unlike some other data structures, they are indexed,
meaning each element in the array can be accessed via its index (position). 
In most programming languages, the array index starts from 0.

Key Characteristics of Arrays.Arrays:
==============================
Fixed Size: Once an array is created, it cannot change its size. You define the size of an array when you create it, and it remains constant throughout.
Indexed Access: Each element in an array can be accessed by its index. For example, in an array arr, the first element is accessed by arr[0], the second by arr[1], and so on.
Homogeneous Elements: All elements in an array are of the same data type (e.g., integers, strings, floats).

Memory Representation:
======================
Arrays.Arrays are stored in contiguous memory locations. This means that the elements of an array are placed sequentially in memory, making array access faster and efficient.

Types of Arrays.Arrays:
================
1) One-dimensional Array (1D): A linear collection of elements.
  ex: int[] arr = {1, 2, 3, 4, 5};  // 1D array

2) Two-dimensional Array (2D): Used to represent matrices or tables, where each element is an array itself.
  ex: int[][] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};  // 2D array (3x3 matrix)

3) Multidimensional Array: Arrays.Arrays of more than two dimensions, used in complex data structures like 3D grids.
  ex: int[] scores = new int[5];  // Create an array of size 5

// Assigning values to the array
scores[0] = 85;
scores[1] = 90;
scores[2] = 75;
scores[3] = 88;
scores[4] = 92;

// Accessing values
System.out.println(scores[2]);  // Output: 75

// Looping through the array
for (int i = 0; i < scores.length; i++) {
    System.out.println("Score of student " + (i + 1) + ": " + scores[i]);
}


Operations on Arrays.Arrays:
=====================
Traversal:
Looping through each element in the array.
  ex:
  for (int i = 0; i < numbers.length; i++) {
    System.out.println(numbers[i]);
  }

Insertion:
Adding an element to a specific position requires shifting elements to the right.
  ex: 
  for (int i = numbers.length - 1; i > 2; i--) {
    numbers[i] = numbers[i - 1];
  }
  numbers[2] = 99;

Deletion:
Removing an element from a specific index requires shifting elements to the left.
  ex: 
  for (int i = 2; i < numbers.length - 1; i++) {
    numbers[i] = numbers[i + 1];
  }

Searching:
Linear Search: Iterate through the array to find a specific element (O(n) time complexity).
Binary Search: Used for sorted arrays, divides the search space in half with each comparison (O(log n) time complexity).


Summary:
Arrays.Arrays are a simple yet powerful data structure that allows you to store and manipulate multiple elements of the same type in an indexed manner.
They are efficient for accessing elements but have limitations, like fixed size and costly insertion/deletion operations.
